# This file contains a configuration snippet for a dual extruder
# printer using dual carriages (an "IDEX" printer).

# See docs/Config_Reference.md for a description of parameters.

# Definition for the primary carriage (holding the primary extruder)
# and the definition for the primary extruder in main config file

########################################
# DUAL-CARRIAGES
########################################

[respond]

[gcode_macro DC_VARS]
# Offset coordinates for dual_carriage
variable_offset_x: 0 #-0.575 #-20.65 #-0.06  #-0.3 #was -0.15
variable_offset_y: 0 #-0.075 #-0.15 #was -0.15 #-0.3 #was0
variable_offset_z: 0  # 0.23
variable_left_probe: 0
variable_right_probe: 0
variable_diff_treshold: 0.175
# Autopark parameters
## default autopark: 0:inactive - 1:active
variable_autopark: 1
variable_z_hop: 0
variable_movespeed: 6000
variable_feedrate: 18000
variable_y_scrub: 290
# Print mode: 0=independent, 1=copy, 2=mirror
variable_print_mode: 0
# HeatBed size
variable_bed_x_min: 0
variable_bed_x_max: 303
# Print cooling fans names
variable_fan0: 'fanX1'
variable_fan1: 'fanX2'
# Extruders temp
variable_offset_temp: 0
variable_active_carriage: 0
# Material chamber temp
variable_mat_temp: 32
# Material loaded
variable_material_cura0: 'empty'
variable_material_cura1: 'empty'
variable_extruders_enabled: 0
variable_sensor_verification: 1
variable_setup_verification: 1
variable_extruder1_in_use: 0

gcode:


[ gcode_macro IDEX_OFFSET]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set afc_vars = printer["gcode_macro AFC_VARS"] %}
    {% set offset_x = params.X|default(0.0)|float(2) %}
    {% set offset_y = params.Y|default(0.0)|float(2) %}
    {% set offset_z = params.Z|default(0.0)|float(2) %}
    {% if afc_vars.isprinting == 1 %}
        SET_GCODE_OFFSET X_ADJUST={offset_x} Y_ADJUST={offset_y} Z_ADJUST={offset_z} MOVE=1
    {% else %}
        SET_GCODE_OFFSET X_ADJUST={offset_x} Y_ADJUST={offset_y} Z_ADJUST={offset_z} MOVE=0
    {% endif %}
    {% set new_offset_x = (dcvars.offset_x|float(2) + offset_x|float(2)) %}
    {% set new_offset_y = (dcvars.offset_y|float(2) + offset_y|float(2)) %}
    {% set new_offset_z = (dcvars.offset_z|float(2) + offset_z|float(2)) %}
    SAVE_VARIABLE VARIABLE=offset_x VALUE={new_offset_x}
    SAVE_VARIABLE VARIABLE=offset_y VALUE={new_offset_y}
    SAVE_VARIABLE VARIABLE=offset_z VALUE={new_offset_z}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_x VALUE={new_offset_x}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_y VALUE={new_offset_y}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={new_offset_z}

## DUAL-CARRIAGES : FULL_CONTROL - AUTO-PARK

[gcode_macro T0]
variable_was_active: 0
variable_was_primed: 0
description: Activate T0 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set afc_vars = printer["gcode_macro AFC_VARS"] %}
    #{% if printer.dual_carriage is defined %}
    {% if printer.toolhead.extruder == 'extruder1' %}
    #{% if dcvars.active_carriage == 1 %}
        {% if not "xyz" in printer.toolhead.homed_axes and printer.idle_timeout.state != "Printing" %}
            G28
        {% endif %}
        M400
            #{% if dcvars.autopark == 1 %}
                # z-hop
        #{% if dcvars.z_hop|float > 0.0 %}
        #    {% set max_z = printer.toolhead.axis_maximum.z|float %}
        #    {% set cur_z = printer.toolhead.position.z|float %}
        #    {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
        #    G91
        #    G1 Z{z_safe}
        #    G90
        #{% endif %}
            # park tool
        SAVE_GCODE_STATE NAME=toolhead_state
         _PARK_TOOL
         M400
         #{% endif %}
        # toggle carriage
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        SAVE_VARIABLE VARIABLE=active_carriage VALUE=0
        SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_active VALUE=1
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=active_carriage VALUE=0
        #RESPOND MSG="T0 Extruder Was Active"
        {% if afc_vars.isprinting == 1 %}   #printer.idle_timeout.state == "Printing" %}
            right_idle
            M400
            SET_GCODE_VARIABLE MACRO=T0 VARIABLE=was_active VALUE=1
            {% if printer['gcode_macro T0'].was_primed == 0 and afc_vars.afc == 0 %} #and afc_vars.isprinting == 0 %}
                PRIME_ROUTINE
                M400
                SET_GCODE_VARIABLE MACRO=T0 VARIABLE=was_primed VALUE=1
            {% endif %}
            left_printing
            #SET_GCODE_OFFSET X=0 Y=0 Z=0
            _NOZZLE_SCRUB
        {% endif %}
            #SET_INPUT_SHAPER SHAPER_FREQ_X=45.6 SHAPER_FREQ_Y=82.8 SHAPER_TYPE_X=EI SHAPER_TYPE_Y=ZV

            #_NOZZLE_SCRUB
            #{% if dcvars.autopark == 1 and printer.idle_timeout.state != "Printing" %}
                #RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED={dcvars.movespeed}
            #{% elif dcvars.autopark == 1 %}
        RESTORE_GCODE_STATE NAME=toolhead_state
            #{% endif %}
            # offsets
        SET_GCODE_OFFSET X=0 Y=0 Z=0 #MOVE=0 MOVE_SPEED={dcvars.movespeed}
            # print fan speed
        _SET_PRINT_FANS_SPEED
            # restore z
        #{% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
        #    G91
        #    G1 Z-{z_safe}
        #    G90
        #{% endif %}
    {% endif %}
    #{% endif %}

[gcode_macro T1]
variable_was_active: 0
variable_was_primed: 0
description: Activate T1 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set afc_vars = printer["gcode_macro AFC_VARS"] %}
    #{% if printer.dual_carriage is defined %}
    {% if printer.toolhead.extruder == 'extruder' %}
    #{% if dcvars.active_carriage == 0 %}
        {% if not "xyz" in printer.toolhead.homed_axes and printer.idle_timeout.state != "Printing" %}
            G28
        {% endif %}
        M400
            #{% if dcvars.autopark == 1 %}
                # z-hop
        #{% if dcvars.z_hop|float > 0.0 %}
        #    {% set max_z = printer.toolhead.axis_maximum.z|float %}
        #    {% set cur_z = printer.toolhead.position.z|float %}
        #    {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
        #    G91
        #    G1 Z{z_safe}
        #    G90
        #{% endif %}
                # park tool
        SAVE_GCODE_STATE NAME=toolhead_state
        _PARK_TOOL
        M400
            #{% endif %}
            # toggle carriage
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        SET_DUAL_CARRIAGE CARRIAGE=1
        SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={dcvars.offset_z}
        SAVE_VARIABLE VARIABLE=active_carriage VALUE=1
        SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_active VALUE=1
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=active_carriage VALUE=1
        #RESPOND MSG="T1 Extruder Was Active"
        #SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_active VALUE=1
        {% if afc_vars.isprinting == 1 %}#printer.idle_timeout.state == "Printing" %}
            left_idle
            M400
            #SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_active VALUE=1
            {% if printer['gcode_macro T1'].was_primed == 0 and afc_vars.afc == 0 %}
                PRIME_ROUTINE
                M400
                SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_primed VALUE=1
            {% endif %}
            right_printing
            _NOZZLE_SCRUB
        {% endif %}
            #SET_INPUT_SHAPER SHAPER_FREQ_X=43.6 SHAPER_FREQ_Y=70.4 SHAPER_TYPE_X=EI SHAPER_TYPE_Y=EI
            
            #_NOZZLE_SCRUB
            #{% if dcvars.autopark == 1 and printer.idle_timeout.state != "Printing" %}
            #    RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED={dcvars.movespeed}
            #{% elif dcvars.autopark == 1 %}
        {% if printer['gcode_macro AFC_VARS'].was_enabled == 1 %}
            RESTORE_GCODE_STATE NAME=runout_state
        {% else %}
            RESTORE_GCODE_STATE NAME=toolhead_state
        {% endif %}
            # offsets
        SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={dcvars.offset_z} #MOVE=0 MOVE_SPEED={dcvars.movespeed}
            # print fan speed
        _SET_PRINT_FANS_SPEED
            # restore z
        #{% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
        #    G91
        #    G1 Z-{z_safe}
        #    G90
        #{% endif %}
    {% endif %}
    #{% endif %}

[gcode_macro _PARK_TOOL]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    #{% set y_scrub = dcvars.y_scrub %}
    #{% if printer.dual_carriage is defined %}
        SAVE_GCODE_STATE NAME=park_tool
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        G90
        #{% if printer.toolhead.extruder == 'extruder' %}
        {% if printer.dual_carriage.carriage_0 == 'PRIMARY' %}
            {% set XPOS = printer.configfile.settings.stepper_x.position_endstop|float + 0.75 %}
            G1 X{XPOS} F{dcvars.feedrate}
            #G1 Y{dcvars.y_scrub} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.stepper_x.position_endstop} F{dcvars.feedrate}
        #{% elif (printer.toolhead.extruder) == 'extruder1' %}
        {% elif printer.dual_carriage.carriage_1 == 'PRIMARY' %}
            {% set XPOS = printer.configfile.settings.dual_carriage.position_endstop|float - 0.75 %}
            G1 X{XPOS} F{dcvars.feedrate}
            #G1 Y{dcvars.y_scrub} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.dual_carriage.position_endstop} F{dcvars.feedrate}
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
        #{% set new_y_scrub = dcvars.y_scrub %}
        {% if dcvars.y_scrub <= 275 %}
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=y_scrub VALUE=290
        {% else %}
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=y_scrub VALUE={dcvars.y_scrub - 1}
        {% endif %}
        SAVE_VARIABLE VARIABLE=y_scrub VALUE={dcvars.y_scrub}
        RESTORE_GCODE_STATE NAME=park_tool
    #{% endif %}

[gcode_macro _NOZZLE_SCRUB]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if printer.dual_carriage is defined %}
        G90
        {% if printer.toolhead.extruder == 'extruder' %}
            {% set XPOS = printer.configfile.config.stepper_x.position_endstop|float + 0.5 %}
            {% set XPOS1 = printer.configfile.config.stepper_x.position_endstop|float + 15.0 %}
            {% set YPOS = printer.configfile.config.stepper_y.position_endstop|float - 6.0 %}
            G1 Y{YPOS} F{dcvars.feedrate}
            G1 X{XPOS1} F{dcvars.feedrate}
            G1 Y{YPOS - 3} F{dcvars.feedrate}
            G1 X{XPOS} F{dcvars.feedrate}
            G1 Y{YPOS - 6} F{dcvars.feedrate}
            G1 X{XPOS1} F{dcvars.feedrate}
            G1 Y{YPOS - 9} F{dcvars.feedrate}
            G1 X{XPOS} F{dcvars.feedrate}
            G1 Y{YPOS - 12} F{dcvars.feedrate}
            G1 X{XPOS1} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.stepper_x.position_endstop} F{dcvars.feedrate}
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            {% set XPOS = printer.configfile.config.dual_carriage.position_endstop|float - 0.5 %}
            {% set XPOS1 = printer.configfile.config.dual_carriage.position_endstop|float - 15.0 %}
            {% set YPOS = printer.configfile.config.stepper_y.position_endstop|float - 6.0 %}
            G1 Y{YPOS} F{dcvars.feedrate}
            G1 X{XPOS1} F{dcvars.feedrate}
            G1 Y{YPOS - 3} F{dcvars.feedrate}
            G1 X{XPOS} F{dcvars.feedrate}
            G1 Y{YPOS - 6} F{dcvars.feedrate}
            G1 X{XPOS1} F{dcvars.feedrate}
            G1 Y{YPOS - 9} F{dcvars.feedrate}
            G1 X{XPOS} F{dcvars.feedrate}
            G1 Y{YPOS - 12} F{dcvars.feedrate}
            G1 X{XPOS1} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.dual_carriage.position_endstop} F{dcvars.feedrate}
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
    {% endif %}

## DUAL-CARRIAGES : MODES ACTIVATION

# [gcode_macro M605]
# description: Set the dual-carriages mode
# gcode:
#     {% set mode = params.S|default(0)|int %}
#     {% set offset_temp = params.R|default(0)|float %}
#     #{% if printer.dual_carriage is defined %}
#     {% if (mode) == 0 %}
#          SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=print_mode VALUE=0
#         #MODE_FULL_CONTROL
#     {% elif (mode) == 1 %}
#         SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=print_mode VALUE=1
#         #MODE_FULL_CONTROL
#     {% elif (mode) == 2 %}
#         SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=print_mode VALUE=2
#     #{% elif (mode) == 2 %}
#     #        MODE_DUPLICATION R={offset_temp}
#     #    {% elif (mode) == 3 %}
#     #        MODE_MIRRORED R={offset_temp}
#     #    {% endif %}
#     #    G1 F3000
#     {% endif %}
    

[gcode_macro M605]
description: Set the dual-carriages mode
gcode:
    {% set mode = params.MODE|default('idex')|string %}
    #{% set mode = params.S|default(0)|int %}
    {% set offset_temp = params.R|default(0)|float %}
    #{% if printer.dual_carriage is defined %}
    {% if mode == 'idex' %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=print_mode VALUE=0
        RESPOND MSG="Print mode = Idex"
        #MODE_FULL_CONTROL
    {% elif (mode) == 'copy' %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=print_mode VALUE=1
        RESPOND MSG="Print mode = Copy"
        #MODE_FULL_CONTROL
    {% elif (mode) == 'mirror' %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=print_mode VALUE=2
        RESPOND MSG="Print mode = Mirror"
    #{% elif (mode) == 2 %}
    #        MODE_DUPLICATION R={offset_temp}
    #    {% elif (mode) == 3 %}
    #        MODE_MIRRORED R={offset_temp}
    #    {% endif %}
    #    G1 F3000
    {% endif %}

## DUAL-CARRIAGES : PRINT FANS MANAGEMENT
[gcode_macro ACTIVATE_COPY_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X75 F24000
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X225
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

# A helper script to activate mirror mode
[gcode_macro ACTIVATE_MIRROR_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X0 F24000
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X300
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

[gcode_macro M106]
#rename_existing: M106.1
description: Override "M106" to allow multiple extruders.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set raw_speed = params.S|default(0)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %}
    {% if (params.P) is defined %}
        {% set P_fan = dcvars.fan0 if (params.P)|int == 0 else dcvars.fan1 %}
        SET_FAN_SPEED FAN={P_fan} SPEED={fan_speed}
    {% else %}
    #{% elif printer.dual_carriage is defined %}
        _SET_PRINT_FANS_SPEED SPEED={fan_speed}
    {% endif %}
    
[gcode_macro M107]
#rename_existing: M107.1
description: Override "M107" to allow multiple extruders.
gcode:
    M106 S0
    
[gcode_macro _SET_PRINT_FANS_SPEED]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if params.SPEED is defined %}
        {% set fan_speed = params.SPEED|float %}
    {% else %}
        # read print fan speed from active extruder
        {% set fan0_speed = printer["fan_generic " + dcvars.fan0].speed|float %}
        {% set fan1_speed = printer["fan_generic " + dcvars.fan1].speed|float %}
        {% set fan_speed = [fan0_speed, fan1_speed]|max %}
    {% endif %}
    {% if dcvars.active_carriage == "BOTH" %}
        SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}
    {% elif dcvars.active_carriage == 0 %}
        SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}
    {% elif dcvars.active_carriage == 1 %}
        SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}
    {% endif %}

## DUAL-CARRIAGES : HEATERS MANAGEMENT
    
[gcode_macro M104]
#variable_isprinting: false
rename_existing: M104.1
description: Override "M104" to allow multiple extruders to be synchronized.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set temp = params.S|default(0)|float %}
    {% set tool = params.T|default(3)|int %}
    #{% if dcvars.active_carriage == 0 %}
    {% if tool == 0 %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
    {% elif tool == 1 %}
        SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={temp}
    {% else %}
        {% if dcvars.active_carriage == 0 %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
        {% else %}
            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={temp}
        {% endif %}
    {% endif %}
    {% if dcvars.print_mode != 0 %}
        _SYNC_EXTRUDERS_TEMP
    {% endif %}

[gcode_macro M109]
#variable_tolerance: 3.0
rename_existing: M109.1
description: Override "M109" to allow multiple extruders to be synchronized.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set temp = params.S|default(0)|float %}
    {% set tool = params.T|default(3)|int %}
    {% set tolerance = params.TOLERANCE|default(8)|int %}
    #{% set heater = params.H|default(extruder)|string %}
    {% if tool == 0 %}
        {% set heater = "extruder" %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
    {% elif tool == 1 %}
        {% set heater = "extruder1" %}
         SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={temp}
    {% else %}
        {% if dcvars.active_carriage == 0 %}
        {% set heater = "extruder" %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
        {% else %}
        {% set heater = "extruder1" %}
            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={temp}
        {% endif %}
    {% endif %}
    {% if dcvars.print_mode != 0 %}
        _SYNC_EXTRUDERS_TEMP
    {% endif %}
    M400
    TEMPERATURE_WAIT SENSOR={heater} MINIMUM={temp - tolerance}

[gcode_macro _SYNC_EXTRUDERS_TEMP]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set temp1 = printer.extruder.target|float %}
    {% set temp2 = printer.extruder1.target|float %}
    {% if dcvars.active_carriage == 0%}
       M104.1 T1 S{temp1}
       status_heating_right
    {% else %}
        M104.1 T0 S{temp2}
        status_heating_left
    {% endif %}

[gcode_macro IDEX_NOZZLE_CHECK]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if 'xyz' in printer.toolhead.homed_axes %}
		G1 X150 Y150 Z5 F18000
	{% else %}
		G28
		G1 X150 Y150 Z5 F18000
	{% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    SAVE_GCODE_STATE NAME=toolhead_state
    PROBE
    LEFT_PROBE_OFFSET
    G1 Z5 F3000
    _PARK_TOOL
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1
    RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED=30000
    #SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={dcvars.offset_z} MOVE=1 MOVE_SPEED=30000
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    PROBE
    RIGHT_PROBE_OFFSET
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1
    G1 Z5 F3000
    _PARK_TOOL
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    #SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=0
    IDEX_DIFF

[gcode_macro LEFT_PROBE_OFFSET]
gcode:
  #M118 Left Nozzle Value:{printer.probe.last_z_result|round(3, 'common')}
  SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=left_probe VALUE={printer.probe.last_z_result|round(3, 'common')}
  #{action_respond_info("Left Nozzle Value: " +printer["gcode_macro DC_VARS"].left_probe|string)}


[gcode_macro RIGHT_PROBE_OFFSET]
gcode:
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=right_probe VALUE={printer.probe.last_z_result|round(3, 'common')}
    #{action_respond_info("Right Nozzle Value: " +printer["gcode_macro DC_VARS"].right_probe|string)}

[gcode_macro IDEX_DIFF]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set afcvars = printer["gcode_macro AFC_VARS"] %}
    {% set left = dcvars.left_probe|float %}
    {% set right = dcvars.right_probe|float %}
    {% if left < 0 and right < 0 %}
        {% if left > right %}
            {% set diff = (right - left|float) %}
        {% elif left < right %}
            {% set diff = (left - right|float) * -1 %}
        {% else %}
            {% set diff = 0 %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={diff}
    {% elif left > 0 and right < 0 %}
        {% set diff = (left - right|float) %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={diff * -1}
    {% elif left < 0 and right > 0 %}
        {% set diff = (right - left|float) %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={diff}
    {% else %}
        {% if left > right %}
            {% set diff = (left - right|float) %}
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={diff * -1}
        {% else %}
            {% set diff = (right - left|float) %}
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={diff * -1}
        {% endif %}
    {% endif %}
    #{% set diff = (left - right|float) if left > right else (right - left|float) %}
    #M118 R: {diff}
    #{action_respond_info("Nozzle's height within tolerance: " +diff|string)}
    {% if dcvars.print_mode != 0 %}
        {% if diff > dcvars.diff_treshold or diff < (dcvars.diff_treshold * -1) %}
            CANCEL_PRINT_BASE
		    RESPOND TYPE=error MSG="Nozzle height difference limit exceeded."
        {% else %}
            {action_respond_info("Nozzle's height within tolerance: " +diff|string)}
        {% endif %}
    {% elif afcvars.isprinting == 0 %}
        {% if diff > dcvars.diff_treshold or diff < (dcvars.diff_treshold * -1) %}
            CANCEL_PRINT_BASE
		    RESPOND TYPE=error MSG="Nozzle height difference limit exceeded."
        {% else %}
            M118 Nozzle height within tolerance: {diff}
        {% endif %}
    {% endif %}